# **Gautam Buddha University**  
**University School of Information and Communication Technology**  
**Department of Information Technology** 
**Session 2024-2025** 

## **Programme Structure**  
### **Bachelor of Computer Applications (BCA) – 3-Year Programme**  

### **Course Structure**  

## **Semester I**  

| S.No. | Course Code | Course Name                                  | L  | T  | P  | Credits | Type          |
|-------|------------|----------------------------------------------|----|----|----|---------|--------------|
| 1     | BCA109     | Computer Fundamentals and Programming in C   | 3  | 0  | 0  | 3       | CC1 / FC     |
| 2     | BCA111     | Basics of Artificial Intelligence           | 3  | 0  | 0  | 3       | CC2 / FC     |
| 3     | BCA113     | Introduction to Web Technology              | 3  | 0  | 0  | 3       | CC3 / SEC    |
| 4     | BCA107     | Logical Organization of Computer            | 3  | 0  | 0  | 3       | CC4          |
| 5     | MA151      | Mathematical Foundation of Computer Science-I | 3  | 1  | 0  | 4       | GE1          |
| 6     | EN101      | English Proficiency                         | 2  | 0  | 0  | 2       | OE1 / AECC   |
| 7     | BCA185     | C Programming Lab                           | 0  | 0  | 3  | 2       | CC-L1 / SEC  |
| 8     | BCA187     | Web Technology Lab                         | 0  | 0  | 3  | 2       | CC-L2        |
| 9     | GP         | General Proficiency                        | -  | -  | -  | Non-Credit | -          |

### **Total Hours and Credits: 17 (L) + 3 (T) + 6 (P) = 22 Credits**  

---

## **Semester II**  

| S.No. | Course Code | Course Name                                  | L  | T  | P  | Credits | Type          |
|-------|------------|----------------------------------------------|----|----|----|---------|--------------|
| 1     | BCA110     | Fundamentals of Operating System            | 3  | 0  | 0  | 3       | CC5 / SEC    |
| 2     | BCA112     | Fundamentals of Data Science               | 3  | 0  | 0  | 3       | CC6          |
| 3     | BCA106     | System Analysis and Design                 | 3  | 0  | 0  | 3       | CC7 / FC     |
| 4     | BCA108     | Digital Logic                              | 3  | 0  | 0  | 3       | CC8          |
| 5     | MA152      | Mathematical Foundation of Computer Science-II | 3  | 1  | 0  | 4       | GE2          |
| 6     | ES101      | Environmental Studies                      | 4  | 0  | 0  | 4       | OE2 / AECC   |
| 7     | BCA186     | Operating System Lab                       | 0  | 0  | 3  | 2       | CC-L3 / SEC  |
| 8     | BCA188     | MS Excel Lab                               | 0  | 0  | 3  | 2       | CC-L4        |
| 9     | GP         | General Proficiency                        | -  | -  | -  | Non-Credit | -          |

### **Total Hours and Credits: 19 (L) + 1 (T) + 6 (P) = 24 Credits**  

---

Here’s the well-formatted version of the given text for better readability:  

---

# **Semester III**  

| S.No. | Course Code | Course Name                                 | L  | T  | P  | Credits | Type         |
|-------|------------|---------------------------------------------|----|----|----|---------|-------------|
| 1     | BCA201     | Python Programming                         | 3  | 0  | 0  | 3       | CC9 / SEC   |
| 2     | BCA203     | Software Engineering Fundamentals         | 3  | 0  | 0  | 3       | CC10        |
| 3     | BCA205     | Introduction to Database Management System | 3  | 0  | 0  | 3       | CC11 / FC   |
| 4     | BCA207     | Fundamentals of Data Structures           | 3  | 0  | 0  | 3       | CC12 / SEC  |
| 5     | BCA209     | Discrete Structures                       | 3  | 0  | 0  | 3       | CC13        |
| 6     | BCA211     | Basics of Digital Marketing               | 3  | 0  | 0  | 3       | CC14        |
| 7     | BCA281     | Python Programming Lab                    | 0  | 0  | 3  | 2       | CC-L5 / SEC |
| 8     | BCA283     | Database Management System Lab            | 0  | 0  | 3  | 2       | CC-L6       |
| 9     | GP         | General Proficiency                       | -  | -  | -  | Non-Credit | -         |

### **Total Hours and Credits: 18 (L) + 0 (T) + 6 (P) = 22 Credits**  

---

# **Semester IV**  

| S.No. | Course Code | Course Name                                | L  | T  | P  | Credits | Type         |
|-------|------------|--------------------------------------------|----|----|----|---------|-------------|
| 1     | BCA202     | Fundamentals of Java Programming          | 3  | 0  | 0  | 3       | CC15 / SEC  |
| 2     | BCA204     | Fundamentals of Machine Learning          | 3  | 0  | 0  | 3       | CC16        |
| 3     | BCA206     | Introduction to Information Security      | 3  | 0  | 0  | 3       | CC17        |
| 4     | BCA208     | Basics of Theory of Computation          | 3  | 0  | 0  | 3       | CC18        |
| 5     | BCA210     | Data Analytics Fundamentals              | 3  | 0  | 0  | 3       | CC19 / SEC  |
| 6     | BCA212     | Introduction to Soft Computing           | 2  | 0  | 0  | 2       | CC20        |
| 7     | BCA282     | Java Programming Lab                     | 0  | 0  | 3  | 2       | CC-L7 / SEC |
| 8     | BCA292     | Minor Project                            | 0  | 0  | 10 | 5       | MP1 / E     |
| 9     | GP         | General Proficiency                      | -  | -  | -  | Non-Credit | -         |

### **Total Hours and Credits: 17 (L) + 0 (T) + 13 (P) = 24 Credits**  

---

Here’s the well-formatted version of the given text for better readability:  

---

# **Semester V**  

| S.No. | Course Code | Course Name                              | L  | T  | P  | Credits | Type        |
|-------|------------|------------------------------------------|----|----|----|---------|------------|
| 1     | BCA301     | PHP                                      | 3  | 0  | 0  | 3       | CC21 / SEC |
| 2     | BCA303     | Introduction to Compiler Design         | 3  | 0  | 0  | 3       | CC22       |
| 3     | BCA305     | Basics of Computer Graphics            | 3  | 0  | 0  | 3       | CC23       |
| 4     | BCA307     | Computer Networks Fundamentals         | 3  | 0  | 0  | 3       | CC24       |
| 5     | BCA315     | Elective-1 (Fundamentals of Cyber Security) | 3  | 0  | 0  | 3       | E1 / DSE   |
| 6     | BCA319     | Elective-2 (Introduction to Multimedia Systems) | 3  | 0  | 0  | 3       | E2 / DSE   |
| 7     | BCA381     | PHP Lab                                 | 0  | 0  | 3  | 2       | CC-L8 / SEC |
| 8     | BCA383     | Compiler Design Lab                    | 0  | 0  | 3  | 2       | CC-L9       |
| 9     | GP         | General Proficiency                    | -  | -  | -  | Non-Credit | -       |

### **Total Hours and Credits: 18 (L) + 0 (T) + 6 (P) = 22 Credits**  

---

# **Semester VI**  

| S.No. | Course Code | Course Name                           | L  | T  | P  | Credits | Type        |
|-------|------------|---------------------------------------|----|----|----|---------|------------|
| 1     | BCA302     | .NET Technology                      | 3  | 0  | 0  | 3       | CC25       |
| 2     | BCA304     | Basics of Internet of Things         | 3  | 0  | 0  | 3       | CC26       |
| 3     | -         | Elective-3                            | 3  | 0  | 0  | 3       | E3 / DSE   |
| 4     | -         | Elective-4                            | 3  | 0  | 0  | 3       | E4 / DSE   |
| 5     | BCA382     | .NET Technology Lab                  | 0  | 0  | 3  | 2       | CC-L10 / SEC |
| 6     | BCA384     | Internet of Things Lab               | 0  | 0  | 3  | 2       | CC-L11 / SEC |
| 7     | BCA392     | Major Project                        | 0  | 0  | 16 | 8       | MP2 / E    |
| 8     | GP         | General Proficiency                  | -  | -  | -  | Non-Credit | -       |

### **Total Hours and Credits: 12 (L) + 0 (T) + 22 (P) = 24 Credits**  

---

# **Electives**  

| S.No. | Course Code | Course Name                                | L  | T  | P  | Credits | Type  |
|-------|------------|--------------------------------------------|----|----|----|---------|------|
| 1     | BCA309     | Fundamentals of Cloud Computing            | 3  | 0  | 0  | 3       | E1   |
| 2     | BCA311     | Introduction to Fuzzy Logic                | 3  | 0  | 0  | 3       | E1   |
| 3     | BCA313     | Basics of Natural Language Processing      | 3  | 0  | 0  | 3       | E1   |
| 4     | BCA315     | Fundamentals of Cyber Security             | 3  | 0  | 0  | 3       | E1   |
| 5     | BCA317     | Basics of Expert Systems                   | 3  | 0  | 0  | 3       | E2   |
| 6     | BCA319     | Introduction to Multimedia System          | 3  | 0  | 0  | 3       | E2   |
| 7     | BCA321     | Information Security Fundamentals          | 3  | 0  | 0  | 3       | E2   |
| 8     | BCA323     | Fundamentals of Evolutionary Computing     | 3  | 0  | 0  | 3       | E2   |
| 9     | BCA306     | Computer Network Security                 | 3  | 0  | 0  | 3       | E3   |
| 10    | BCA308     | Concepts of Mobile Computing              | 3  | 0  | 0  | 3       | E3   |
| 11    | BCA310     | Basics of Blockchain                      | 3  | 0  | 0  | 3       | E3   |
| 12    | BCA312     | Introduction to Wireless Technology       | 3  | 0  | 0  | 3       | E3   |
| 13    | BCA314     | Fundamentals of Optimization Techniques   | 3  | 0  | 0  | 3       | E4   |
| 14    | BCA316     | Introduction to Computer Vision          | 3  | 0  | 0  | 3       | E4   |
| 15    | BCA318     | Basics of Data Science                   | 3  | 0  | 0  | 3       | E4   |
| 16    | BCA320     | Fundamentals of Digital Image Processing | 3  | 0  | 0  | 3       | E4   |

---

# **Open and Generic Electives from Other Schools**  

| S.No. | Course Code | Course Name                                  | L  | T  | P  | Credits | Type  |
|-------|------------|----------------------------------------------|----|----|----|---------|------|
| 17    | EN101      | English Proficiency                         | 2  | 0  | 0  | 2       | OE1   |
| 18    | ES101      | Environmental Studies                      | 4  | 0  | 0  | 4       | OE2   |
| 19    | MA151      | Mathematical Foundation of Computer Science-I | 3  | 1  | 0  | 4       | GE1   |
| 20    | MA152      | Mathematical Foundation of Computer Science-II | 3  | 1  | 0  | 4       | GE2   |

---


# **Semester I Courses**

## **Computer Fundamentals and Programming in C**

### **Course Details:**
- **Course Code:** BCA 109  
- **Course Credits:** 3  
- **Course Category:** CC1  
- **Course (U / P):** U  
- **Course Year (U / P):** 1U  
- **Course Semester:** 1U  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 1  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

### **Course Objectives:**
1. Knowledge of basics of computers
2. A general understanding of I/O Devices
3. Understanding of operating system including memory management
4. Understanding of computer generations and languages
5. Understanding of coding fundamentals

### **Course Outcomes:**
At the end of the course, students should be able to:
1. Understand the fundamental concepts of computers
2. Understand the concept of Computer Organization
3. Understand the concept of Memory and data processing
4. Understand Analog and Digital Computers
5. Understand the basic terminologies used in computer programming

### **Course Units:**
#### **Unit I: Basics of Computer**
- Computer System Characterization & Capabilities
- Computer Hardware & Software
- I/O Devices, Types of Software
- Types of Computer: Analog, Digital & Hybrid
- Generations of Computers
- Introduction to PC, Types of PC Systems

#### **Unit II: Computer Organization**
- Operating System, Booting, Functions of OS, Types of OS
- Storage Fundamentals: Primary and Secondary Storage
- Data Storage and Retrieval Methods
- Tape Storage and Retrieval Methods
- Direct Access Storage for Microcomputers (Hard Disks, Disk Cartridge)
- Mass Storage Systems and Optical Disks (CD ROM)

#### **Unit III: Data Processing**
- Data, Data Processing System, Storing Data, Processing Data
- Central Processing Unit (CPU): Microprocessor, Control Unit, ALU, Registers, Buses
- Main Memory (RAM, ROM)
- Output Devices: Printers (Impact, Non-Impact), Plotters, CRT and Flat Screen Technologies

#### **Unit IV: Computer & System Software**
- System Software vs. Application Software
- Types of System Software, OS Programs, Booting Loader, BIOS
- Utility Programs, File Maintenance
- Language Processors: Assembler, Compiler, Interpreter
- Applications Software: PC Software, Packages

#### **Unit V: Computer Languages**
- Programming Languages: Low Level vs. High Level
- Machine Code, Assembly Language, High-Level Languages
- Object-Oriented Programming, Fourth Generation Languages (4GLs)
- Merits and Demerits of 4GLs, Application Program Generators (APGs)

### **Textbooks:**
1. William Stallings, "Computer Organization and Architecture", PHI  

### **Reference Books:**
1. Computer Fundamentals by P.K. Sinha
2. Fundamentals of Computers by V. Rajaraman (B.P.B. Publications)
3. Fundamentals of Computers by P.K. Sinha
4. Unix Concepts and Application by Sumitabha Das
5. MS-Office 2000 (For Windows) by Steve Sagman
6. Computer Today by S.K. Bansandra (Galgotia Publications, New Delhi)

---

## **Basics of Artificial Intelligence**

### **Course Details:**
- **Course Code:** BCA 111  
- **Course Credits:** 3  
- **Course Category:** CC  
- **Course (U / P):** U  
- **Course Year (U / P):** 1U  
- **Course Semester:** 2U  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 1  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

### **Course Objectives:**
1. Introduce students to artificial intelligence
2. Understand key concepts of artificial intelligence
3. Familiarize students with AI project workflows
4. Explore AI application areas
5. Implement AI projects

### **Course Outcomes:**
At the end of the course, students should be able to:
1. Understand AI evolution
2. Understand key AI concepts
3. Understand AI project workflows
4. Be aware of AI applications
5. Implement AI projects

### **Course Units:**
#### **Unit I: Introduction**
- AI Components, Goals, Types, History
- Turing Test, Intelligence, Intelligent Systems
- Weak AI vs. Strong AI, Mind-Body Problem, Chinese Room Experiment

#### **Unit II: Agents in AI**
- Intelligent Agents, Types, Structure, Agent Environment
- Knowledge Engineering, Knowledge-Based Systems

#### **Unit III: Searching Techniques and AI Problems**
- Search Algorithms: BFS, DFS, Best-First Search
- Problems: Tic-Tac-Toe, Water Jug, Chess, Tower of Hanoi

#### **Unit IV: Knowledge Representation**
- Declarative, Procedural, Meta, Structural, Inheritable, Inferential Knowledge
- Knowledge Storage, AI Knowledge Cycle

#### **Unit V: AI Techniques and Applications**
- Machine Learning, Deep Learning, Expert Systems, NLP
- AI in Social Media, Drones, Finance, Smart Cars, E-Commerce, Healthcare

### **Textbooks:**
1. "Artificial Intelligence" by Elaine Reich (Tata McGraw Hill, 2008)
2. "Artificial Intelligence" by Ela Kumar (IK Publishing)
3. "Artificial Intelligence" by Russel and Norvig (Pearson, 2006)

---

## **Introduction to Web Technology**

### **Course Details:**
- **Course Code:** BCA 113  
- **Course Credits:** 3  
- **Course Category:** CC3  
- **Course (U / P):** U  
- **Course Year (U / P):** 1U  
- **Course Semester:** 1U  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 1  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

### **Course Objectives:**
1. Understand basic concepts of Internet and Web technology
2. Learn Web Designing principles
3. Explore Browsing tools and technologies
4. Understand JavaScript fundamentals
5. Learn XML and its functionalities

### **Course Outcomes:**
1. Understand Internet and Web technology basics
2. Appreciate the significance of Internet technologies
3. Apply Internet technology to web applications
4. Design web applications using different technologies

### **Course Units:**
#### **Unit I: Overview of Internet and Web**
- Internet History, Services, Protocols, Web Servers, Security

#### **Unit II: Web Design**
- HTML, XHTML, XML, SGML, Document Object Model (DOM), Security Issues

#### **Unit III: Browsing Systems**
- Search Engines, Crawlers, Internet Applications

#### **Unit IV: JavaScript**
- Language Elements, Data, Math, Strings, Regular Expressions, Arrays

#### **Unit V: XML**
- XML Features, Well-Formed Documents, Data Storage, E-Publishing

### **Reference Books:**
1. "Internet and Web Technologies" by Raj Kamal (TMH, 2005)
2. "Web Publishing" by Monica D'Souza (TMH, 2001)
3. "Web Design" by David Crowder & Rhonda Crowder (IDG Books, 2001)
4. "HTML and XHTML: The Definitive Guide" by Musciano C. (O'Reilly, 2006)
5. "Internet and World Wide Web: How to Program" by Deitel & Deitel (PHI, 4th Edition)


**LOGICAL ORGANIZATION OF COMPUTER**

**Course Code:** BCA107  
**Course Credits:** 4  
**Course Category:** CC4  
**Course (U / P):** U  
**Course Year (U / P):** 1U  
**Course Semester (U / P):** 1U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 01  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 15  
**End Sem. Exam Hours:** 3  

### COURSE OBJECTIVES
1. Understanding of digital representation of data in a computer system.
2. Understand the general concepts in digital logic design, including logic elements.
3. Understanding of combinational and sequential logic circuit design.
4. Understanding of computer arithmetic, formulate and solve problems.
5. Understand the performance requirements of systems.

### COURSE OUTCOMES
At the end of the course, students should be able to:
1. Understand combinational and sequential circuits.
2. Understand register transfer and micro-operations.
3. Learn various types of memories used in computers.
4. Understand processor design.
5. Learn about processor design and its architectures.

### UNIT I: Introduction
- Types of computers: Analog, Digital, and Hybrid Computers, Modern Digital Computer.
- Digital logic circuits and Components: Logic gates, Boolean Algebra, K-Map Simplification.
- Half Adder, Full Adder, Decoder, Encoders, Multiplexers, Demultiplexer, Flip Flops, Registers, Binary Counters.

### UNIT II: Register Transfer & Micro Operation
- Register Transfer Language, Bus and Memory Transfer, Bus Architecture.
- Arithmetic Micro operations: Binary Adder, Binary Subtractor, Binary Adder-Subtractor, Binary Increment, and Binary Decrement.

### UNIT III: Memory Organization
- Memory Hierarchy, Main Memory (RAM and ROM), Associative Memory, Cache Memory, Auxiliary Memory.
- I/O Organization: I/O interface, Modes of transfer, Interrupt handling, Direct Memory Access, Input/Output processor, Serial Communication.

### UNIT IV: Processor Design
- General Register Organization, Stack Organization, Addressing Modes, Instruction Formats.
- Data Transfer & Manipulation, Program Control.
- Reduced Instruction Set Computer (RISC) and Complex Instruction Set Computer (CISC).

### UNIT V: Parallel Processing
- Introduction, Linear and Nonlinear Pipeline Processors, Super Scalar and Super Pipeline Design.
- Vector Processing, Array Processors, Super Computer.

### Text Books:
1. Mano M., "Computer System Architecture"
2. William Stallings, "Computer Organization and Architecture", PHI

### Reference Books:
1. Mano M., "Digital Logic and Computer Design"
2. Kai Hwang, "Advanced Computer Architecture", McGraw Hill.

---

**C PROGRAMMING LAB**

**Course Code:** BCA185  
**Course Credits:** 2  
**Course Category:** C  
**Course (U / P):** U  
**Course Year (U / P):** 1U  
**Course Semester (U / P):** 1U  
**No. of Lectures + Tutorials (Hrs/Week):** 03  
**Mid Sem. Exam Hours:** --  
**Total No. of Lectures (L + T):** 15  
**End Sem. Exam Hours:** 3  

### COURSE OBJECTIVES
1. Develop fundamental understanding of the C programming environment.
2. Create programming logics and learn C language programming concepts.
3. Design and develop algorithms and programs with different data declarations, initialization, and loop operations.
4. Develop the ability to define and manage functions, arrays, structures, pointers, etc., based on program objectives.
5. Understand and develop C programs to handle computer files, their usage, and perform various operations on files.

### COURSE OUTCOMES
At the end of the course, students should be able to:
1. Understand the fundamentals of C programming.
2. Understand the use of various programming concepts and techniques.
3. Understand C data types and operators with their applications.
4. Use arrays, functions, structures, and unions in C.
5. Develop programs in C using its advanced features.

### LIST OF EXPERIMENTS
1. Write a program to find the sum (arithmetic operations) of two integers.
2. Write a program to demonstrate the execution of loops (while, do-while, and for).
3. Write a program to compute simple and compound interest.
4. Write a program to calculate the factorial of a number using recursion.
5. Write a program to find the reverse of a given number.
6. Write a program to check whether a year is a leap year or not.
7. Write a program to take marks of a student for 5 subjects as input and print the grade.
8. Perform program 5 using a switch-case statement.
9. Write a program to compute the length of a string using a while loop.
10. Write a program to print patterns of different shapes.
11. Write a program to illustrate the difference between call by value and call by reference.
12. Write a program to check whether a given string is a palindrome or not.
13. Create a structure called STUDENT having fields: name, reg. no., class, and age.
14. Write a program to compute the length of a string using pointers.
15. Write a program to create a file, input data, and display its content.

---

**WEB TECHNOLOGY LAB**

**Course Code:** BCA 187  
**Course Credits:** 2  
**Course Category:** CC-L1  
**Course (U / P):** U  
**Course Year (U / P):** 1U  
**Course Semester (U / P):** 1U  
**No. of Lectures + Tutorials (Hrs/Week):** 3  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 10  
**End Sem. Exam Hours:** 3  

### COURSE OBJECTIVES
1. Understand HTML fundamentals.
2. Basic understanding of graphic production with a focus on creating graphics for the web.
3. Introduction to advanced topics such as programming and scripting.
4. Explore the basic tools and applications used in web publishing.

### COURSE OUTCOMES
At the end of the course, students should be able to:
1. Analyze a web page and identify its elements and attributes.
2. Create web pages using XHTML and Cascading Style Sheets (CSS).
3. Build dynamic web pages using JavaScript (Client-side programming).
4. Create XML documents and schemas.

### LIST OF EXPERIMENTS
1. Write an HTML code to display your education details in a tabular format.
2. Write an HTML code to display your CV on a web page.
3. Write an HTML code to create a Home page with three links: About Us, Our Services, and Contact Us.
4. Write an HTML code to create a login form with navigation to a profile page.
5. Write an HTML code to create a Registration Form that redirects users to a login page after submission.
6. Write an HTML code to create an institute, department, and tutorial website.
7. Write an HTML code to illustrate ordered, unordered, and definition lists.
8. Write an HTML code to create a frameset with header, navigation, and content sections.
9. Write an HTML code to demonstrate inline CSS usage.
10. Write an HTML code to demonstrate internal CSS usage.
11. Write an HTML code to demonstrate external CSS usage.
12. Design an HTML form for keeping student records.
13. Write an HTML program to design an entry form for student details with database storage.
14. Write a program in XML and create a CSS style sheet to display the document in a browser.
15. Write an XML program to display products.

---


**SEMESTER II**

---

### **Fundamentals of Operating System**

**Course Details:**
- **Course Code:** BCA110  
- **Course Credits:** 3  
- **Course Category:** CC2  
- **Course (U/P):** U  
- **Course Year (U/P):** 1U  
- **Course Semester (U/P):** 1U  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 1  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

#### **Course Objectives:**
1. Study and apply concepts relating to operating systems.  
2. Understand process management concepts.  
3. Learn memory management techniques.  
4. Study deadlock and its avoidance.  
5. Understand various device and disk management concepts.  

#### **Course Outcomes:**
By the end of this course, students should be able to:
1. Understand the basics, types, and importance of Operating Systems.  
2. Describe process working, CPU scheduling, deadlock occurrence, and prevention.  
3. Implement memory management policies and virtual memory.  
4. Understand OS functions as a resource manager and its components.  
5. Learn file management, data storage, and data transmission.  

#### **Course Units:**

**UNIT I: Introduction to Operating System**
- OS basics, need, and services.  
- Classification: Single-user, Multi-user, Batch Processing, Multiprogramming, Multitasking, Parallel, Distributed, and Real-time systems.  

**UNIT II: Process Management**
- Process concepts, Interprocess communication, Race conditions, Critical Sections, Mutual Exclusion.  
- CPU Scheduling: Round Robin, Priority Scheduling, Multiple Queues, Shortest Job First, Guaranteed Scheduling, Two-Level Scheduling.  

**UNIT III: Memory Management**
- Logical vs Physical Address Space, Swapping, Multiprogramming with partitions, Bit maps, Linked lists, Buddy System.  
- Virtual Memory: Paging, Segmentation, Page Tables, Associative Memory, Page Replacement Algorithms, Thrashing.  

**UNIT IV: File System**
- File systems, Directories, Security, I/O Hardware, Disk Scheduling (FCFS, SSTF, SCAN, C-SCAN).  
- I/O Buffering, RAID, Disk Cache.  

**UNIT V: Deadlock**
- Deadlock conditions, Detection, Recovery, Avoidance, Banker's Algorithm.  
- Deadlock prevention, Two-phase locking, Starvation, Security Mechanisms.  

**Textbooks:**
1. Milenekovie, "Operating System Concept," McGraw Hill.  
2. Abraham Silberschatz, Peter Baer Galvin, Greg Gagne, "Operating System Concepts," John Wiley & Sons.  

**Reference Books:**
1. Harvey M. Deitel, Paul J. Deitel, David R. Choffnes, "Operating Systems," Prentice Hall.  
2. Petersons, "Operating Systems," Addison Wesley.  

---

### **Fundamentals of Data Science**

**Course Details:**
- **Course Code:** BCA112  
- **Course Credits:** 3  
- **Course Category:** CC6  
- **Course (U/P):** U  
- **Course Year (U/P):** 1U  
- **Course Semester (U/P):** 1U  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 1  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

#### **Course Objectives:**
1. Understand the basics of data science.  
2. Learn the significance and process of Data Science.  
3. Explore data collection, management, and storage.  
4. Build and prepare data for statistical modeling.  
5. Analyze data using visualization techniques.  

#### **Course Outcomes:**
By the end of this course, students should be able to:
1. Make testable predictions with real-time data.  
2. Understand data collection and management.  
3. Identify data distribution properties using statistics.  
4. Evaluate models in different environments.  
5. Understand regression techniques.  

#### **Course Units:**

**UNIT I: Introduction to Data Science**
- Definition, Big Data, Data Science Profile, Statistical Inference, Exploratory Data Analysis.  

**UNIT II: Mathematical Preliminaries & Data Munging**
- Probability, Statistics, Correlation Analysis, Data Collection, Cleaning, Crowdsourcing.  

**UNIT III: Scores, Rankings & Statistical Analysis**
- Scoring Systems, Normalization, Ranking Techniques, Statistical Significance, P-values.  

**UNIT IV: Data Visualization & Mathematical Models**
- Visualization techniques, Taxonomy of Models, Model Evaluation.  

**UNIT V: Supervised Learning**
- Linear Regression, Logistic Regression, Naïve Bayes, Decision Tree Classifiers.  

**Textbooks:**
1. Steven S. Skiena, "The Data Science Design Manual," Springer 2017.  
2. Rachel Schutt, "Doing Data Science," O’REILLY, 2013.  

**Reference Books:**
1. Joel Grus, "Data Science from Scratch," 2015.  
2. Gareth James, "An Introduction to Statistical Learning with Applications in R," 2013.  

**Web References:**
1. "Data Science for Engineers" - https://nptel.ac.in/noc/courses/noc20/SEM1/noc20-cs28/  

---

### **System Analysis & Design**

**Course Details:**
- **Course Code:** BCA106  
- **Course Credits:** 3  
- **Course Category:** CC  
- **Course (U/P):** P  
- **Course Year (U/P):** 1P  
- **Course Semester (U/P):** 2P  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 1  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

#### **Course Objectives:**
1. Identify system requirements.  
2. Understand system development approaches.  
3. Evaluate different tools and techniques.  
4. Design information systems.  
5. Understand trade-offs in system components.  

#### **Course Outcomes:**
By the end of this course, students should be able to:
1. Explain System Analysis and Design principles.  
2. Describe System Development Life Cycle.  
3. Conduct feasibility analysis.  
4. Develop project strategies.  
5. Apply system analysis tools in practice.  

#### **Course Units:**

**UNIT I: Basic Concepts of Systems**
- Definition, Elements, Types of Systems, Categories of Information.  

**UNIT II: System Development Life Cycle (SDLC)**
- Phases: Study, Analysis, Design, Development, Testing, Implementation, Maintenance.  

**UNIT III: Feasibility Study & System Analysis Tools**
- DFDs, Flowcharts, Prototyping, Cost-Benefit Analysis.  

**UNIT IV: Detailed Design & Testing**
- Module Specification, Database Design, Testing Methods, Quality Assurance.  

**UNIT V: Implementation & Security**
- System Testing, Performance Evaluation, Security, Disaster Recovery.  



**DIGITAL LOGIC**

**Course Details:**  
- **Course Code:** BCA 108  
- **Course Credits:** 3  
- **Course Category:** CC  
- **Course (U / P):** P  
- **Course Year (U / P):** 1P  
- **Course Semester:** 2P  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** 2  
- **Total No. of Lectures (L + T):** 45 + 00  
- **End Sem. Exam Hours:** 3  

### **COURSE OBJECTIVES**
1. Understand the concept of Digital systems.  
2. Learn about combination logic circuits including Half and Full Adder, Half and Full Subtractor, Series and Parallel Adder, BCD Adders, Look-ahead Carry Adder, Decoders, Encoders, Multiplexers, and De-multiplexers.  
3. Understand Sequential logic circuits including Flip-flop, Shift Registers, and Counters.  
4. Gain knowledge about Memory organization, Classification, and Characteristics of memories such as ROM, PROM, EPROM, EEPROM, and PLD.  

### **COURSE OUTCOMES**
At the end of the course, students should be able to:  
1. Understand the Digital system.  
2. Apply knowledge of combination circuits like Adders, Subtractors, and Multiplexers.  
3. Understand Sequential logic circuits such as Flip-flops, Shift Registers, and Counters.  
4. Comprehend Memory organization, Classification, and Characteristics of various memory types.  

### **UNIT I: INTRODUCTION**
- Review of Number Systems and Binary Codes
- Binary Arithmetic: Addition, Subtraction, Multiplication, and Division Algorithms
- Logic Gates and Boolean Algebra: Theorems and Functions
- Simplification of Boolean Functions and Minimization Techniques
- Karnaugh Map Method, Quine-McCluskey Method
- Realization of Boolean Functions using Universal Gates

### **UNIT II: COMBINATION LOGIC CIRCUIT**
- Analysis and Design of Combination Circuits
- Half and Full Adder, Half and Full Subtractor
- Series and Parallel Adder, BCD Adders, Look-ahead Carry Adder
- Decoders, Encoders, Multiplexers, and De-multiplexers

### **UNIT III: FLIP-FLOP**
- R-S, Clocked R-S, T, D, J-K Flip-flops
- Race Around Problem, Master-Slave Flip-flop
- State and Excitation Tables, Flip-flop Conversions

### **UNIT IV: SHIFT REGISTERS & COUNTERS**
- Synchronous and Asynchronous Counters
- Binary Ripple Counter, Up-Down Counter
- Johnson and Ring Counter
- Analysis and Design of Sequential Circuits
- SISO, SIPO, PISO, PIPO Shift Registers

### **UNIT V: SEMICONDUCTOR MEMORY**
- Memory Organization
- Classification and Characteristics of Memories
- ROM, PROM, EPROM, EEPROM, and PLD

### **TEXTBOOKS:**
1. M. Mano: *Digital Logic and Computer Design*, Pearson Education  
2. William I. Fletcher: *An Engineering Approach to Digital Design*, Pearson Education  
3. R.P. Jain: *Digital Electronics*, TMH  

### **REFERENCES:**
1. W.H. Gothman: *Digital Electronics*, PHI  
2. Millman and Taub: *Pulse, Digital and Switching Waveforms*, MGH  
3. Anand Kumar: *Pulse and Digital Circuits*, PHI  
4. Leach and Malvino: *Digital Principles and Applications*, TMH  

### **WEB REFERENCES:**
1. [Digital Electronics Study Material](https://www.shahucollegelatur.org.in/Department/Studymaterial/sci/it/BCA/FY/digielec.pdf)  
2. [MIT Course Notes](https://www.web.mit.edu/viz/EM/visualizations/coursenotes/modules/guide02.pdf)  
3. [Digital Electronics Books](https://www.pdfdrive.com/digital-electronics-books.html)  

### **E-TEXTBOOKS:**
1. [Free Digital Electronics Books](http://www.freebookcentre.net/Language/Free-Digital-Electronics-Download.htm)  
2. [IMADA Course Notes](http://www.imada.sdu.dk/~svalle/courses/dm14-2005/mirror/c/)  
3. [Digital Logic Design Notes](https://mrcet.com/downloads/digital_notes/IT/DIGITAL%20LOGIC%20DESIGN%20(R17A0461).pdf)  

---

**OPERATING SYSTEM LAB**

**Course Details:**  
- **Course Code:** BCA186  
- **Course Credits:** 2  
- **Course Category:** CC-L  
- **Course (U / P):** U  
- **No. of Labs (Hrs./Week):** 03  
- **Mid Semester Exam Hours:** 1U  
- **Total No. of Labs (L + T):** 10  
- **End Term Exam Hours:** 3U  

### **COURSE OBJECTIVES**
1. Introduction to Operating System fundamentals.  
2. Understanding Process Management.  
3. Working knowledge of Memory Management.  
4. Understanding Contiguous Memory Allocation Techniques.  
5. Knowledge of Deadlock and Disk Scheduling.  

### **COURSE OUTCOMES**
At the end of the course, students should be able to:  
1. Simulate Banker's Algorithm for Deadlock Avoidance and Prevention.  
2. Simulate MVT and MFT.  
3. Implement Contiguous Memory Allocation techniques.  
4. Simulate various File Organization Techniques.  
5. Simulate Paging Techniques of Memory Management.  

### **LIST OF PROGRAMS**
1. Write a C program to simulate non-preemptive CPU scheduling algorithms (FCFS, SJF).  
2. Implement Multi-level Queue Scheduling Algorithm.  
3. Implement File Allocation Strategies (Sequential, Indexed).  
4. Simulate MVT and MFT Memory Management Techniques.  
5. Implement Contiguous Memory Allocation Techniques (Worst-Fit, Best-Fit).  
6. Simulate Paging Techniques of Memory Management.  
7. Implement File Organization Techniques (Single-Level, Two-Level, Hierarchical Directories).  
8. Simulate Banker's Algorithm for Deadlock Avoidance.  
9. Simulate Disk Scheduling Algorithms (FCFS, SCAN).  

---

**MS-EXCEL LAB**

**Course Details:**  
- **Course Code:** BCA 188  
- **Course Credits:** 2  
- **Course Category:** CC  
- **Course (U / P):** U  
- **Course Year (U / P):** 1P  
- **Course Semester:** 2P  
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
- **Mid Sem. Exam Hours:** No  
- **Total No. of Lectures (L + T):** 10 + 00  
- **End Sem. Exam Hours:** 3  

### **COURSE OBJECTIVES**
1. Understand the basics and functions of MS Excel.  
2. Learn data validation and templates.  
3. Understand Sorting and Filtering features.  
4. Explore the use of reports in business.  
5. Learn the purpose and advantages of Charts in business environments.  

### **COURSE OUTCOMES**
1. Understand Excel functions.  
2. Use data validation techniques.  
3. Create reports in Excel.  
4. Work with various formulas.  
5. Create and use charts in Excel.  

### **LIST OF EXPERIMENTS**
1. Introduction and Installation of MS Excel.  
2. Basic arithmetic operations.  
3. Advanced Excel functions.  
4. Data entry and editing.  
5. Formatting and Conditional Formatting.  
6. Chart Creation (Pie Chart, Bar Chart).  
7. Printing and Page Setup options.  

---



**SEMESTER-III**

# **PYTHON PROGRAMMING**

**Course Details:**
- **Course Code:** BCA 201
- **Course Credits:** 3
- **Course Category:** CC9
- **Course (U/P):** U
- **Course Year (U/P):** 2U
- **Course Semester (U/P):** 3U
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00
- **Mid Sem. Exam Hours:** 1
- **Total No. of Lectures (L + T):** 45 + 00
- **End Sem. Exam Hours:** 3

## **Course Objectives**
1. Knowledge of Python basics and its features.
2. Understanding of operators, conditions, and functions in Python.
3. Understanding of string functions & string as an object and list functions & list as an object.
4. Understanding of tuples, sets, dictionaries, and various Python functions.
5. Understanding of files, OOPs features along with database interaction & error handling.

## **Course Outcomes**
At the end of the course, students should be able to:
1. Learn the fundamentals of Python, a widely adopted language for machine learning.
2. Work with Python string objects and functions.
3. Understand the concept of functions and create their own functions.
4. Work with files and OOP concepts.
5. Work with databases, modules, and error handling.

## **Unit Breakdown**
### **UNIT I: Python Basics, Conditional & Loops**
- Installation of Python
- Python Variables and Expressions
- Python Objects: Numbers & Booleans
- Strings
- Operators: Arithmetic, Bitwise, Comparison, and Assignment
- Conditions (if-else, if-elif-else)
- Loops (while, for), Break and Continue statements
- Built-in Functions

### **UNIT II: String Objects and List Objects**
- String Object Basics
- String Methods
- Splitting and Joining Strings
- List Object Basics
- List Methods
- List Comprehensions

### **UNIT III: Tuples, Sets, Dictionaries & Functions**
- Tuples, Sets, Dictionary Object Basics
- Dictionary Object Methods
- Functions in Python
- Iterators
- Lambda Functions

### **UNIT IV: OOP Concepts & Working with Files**
- OOP Basic Concepts
- Creating Classes and Objects
- Inheritance and Multiple Inheritance
- Working with Files: Reading & Writing
- Buffered Read and Write
- Other File Methods

### **UNIT V: Modules, Exception Handling & Database Programming**
- Using Standard Modules
- Creating New Modules
- Exception Handling with Try-Except
- Database Handling: Creating, Inserting, and Retrieving Tables
- Updating and Deleting Data
- Descriptive Analysis with Pandas
- Pandas Input-Output, Manipulation, and GroupBy

**Textbooks:**
1. "Head First Python 2e: A Brain-Friendly Guide" by Paul Barry, O'Reilly.
2. "Python: The Complete Reference" by Martin C. Brown, TMH Publications.

---

# **SOFTWARE ENGINEERING FUNDAMENTALS**

**Course Details:**
- **Course Code:** BCA 203
- **Course Credits:** 3
- **Course Category:** CC10
- **Course (U/P):** U
- **Course Year (U/P):** 2U
- **Course Semester (U/P):** 3U
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00
- **Mid Sem. Exam Hours:** 1
- **Total No. of Lectures (L + T):** 45 + 00
- **End Sem. Exam Hours:** 3

## **Course Objectives**
1. Knowledge of basic software engineering and process paradigms.
2. Understanding of SRS documentation and requirement gathering techniques.
3. Understanding of the design process, ERD, DFD, and use-case diagrams.
4. Understanding of SDLC models and various process models for software development.
5. Understanding of testing mechanisms and maintenance methodologies.

## **Course Outcomes**
At the end of the course, students should be able to:
1. Gain basic knowledge and understanding of software engineering.
2. Apply software engineering principles and techniques.
3. Prepare SRS and design documents for software projects.
4. Develop efficient and reliable solutions for software projects.
5. Perform studies and provide tested deliverables for software problems.

## **Unit Breakdown**
### **UNIT I: Software Engineering**
- Introduction to Software Engineering
- Software Engineering Principles & Process Paradigms
- Planning a Software Project
- Software Project Management

### **UNIT II: Requirement Analysis and Design**
- Software Requirement Specification (SRS)
- Need and Significance of SRS
- Characteristics and Structure of SRS
- Requirement Gathering and Analysis
- Requirement Engineering & Management

### **UNIT III: Software Design Process**
- Architectural Design
- Abstract Specification
- Interface Design
- Component Design
- Data Flow Diagram (DFD)
- Entity-Relation Model (ERD)
- Use Case Diagrams and Sequence Diagrams

### **UNIT IV: Software Life Cycle Models**
- SDLC and its Models (Waterfall, Prototype, Spiral, RAD, etc.)
- Software Development Teams and Environments
- Maintenance and Traceability

### **UNIT V: Software Testing and Maintenance**
- Testing Methods: Unit Testing, Integration Testing, System Testing
- Testing Techniques: White Box Testing, Black Box Testing, Alpha/Beta Testing
- Maintenance Types: Adaptive, Corrective, Perfective, Proactive Defect Prevention
- Maintenance Standards: IEEE-1219, ISO-12207

**Reference Books:**
1. "An Integrated Approach to Software Engineering" by Pankaj Jalote, Narosa Publishing.
2. "Software Engineering" by Ian Sommerville, Pearson Education.
3. "Software Engineering: A Practitioner's Approach" by Roger S. Pressman, McGraw-Hill.

---

# **INTRODUCTION TO DATABASE MANAGEMENT SYSTEM**

**Course Details:**
- **Course Code:** BCA 205
- **Course Credits:** 3
- **Course Category:** CC11
- **Course (U/P):** U
- **Course Year (U/P):** 2U
- **Course Semester (U/P):** 3U
- **No. of Lectures + Tutorials (Hrs/Week):** 03 + 00
- **Mid Sem. Exam Hours:** 1
- **Total No. of Lectures (L + T):** 45 + 00
- **End Sem. Exam Hours:** 3

## **Course Objectives**
1. Understand the basic concepts and applications of database systems.
2. Master the basics of SQL and construct queries using SQL.
3. Understand relational database design principles.
4. Familiarize with transaction processing and concurrency control.
5. Learn database storage structures and access techniques.

## **Course Outcomes**
At the end of the course, students should be able to:
1. Describe fundamental elements of relational database management systems.
2. Design ER models for database applications.
3. Convert ER models to relational tables and formulate SQL queries.
4. Improve database design through normalization.
5. Apply transaction processing mechanisms in relational databases.

## **Unit Breakdown**
### **UNIT I: Database System**
- DBMS vs. File System
- Data Abstraction, Instances, and Schemas
- ER Model, Attributes, and Relationships

### **UNIT II: Relational Database Model**
- Integrity Constraints
- Relational Algebra & Calculus
- Querying Relational Data

### **UNIT III: SQL Query**
- SQL Basics
- Nested & Correlated Queries
- Aggregate Operators and Joins

### **UNIT IV: Normal Forms**
- Normalization (1NF, 2NF, 3NF, BCNF)
- Schema Refinement

### **UNIT V: Transaction Management**
- ACID Properties
- Concurrency Control
- Crash Recovery

**Reference Books:**
1. "Database Management Systems" by Elmasri Navrate, Pearson Education.
2. "Introduction to Database Systems" by C. J. Date, Pearson Education.

---

### **INTRODUCTION TO DATA STRUCTURE**

**Course Code:** BCA207  
**Course Credits:** 3  
**Course Category:** CC12  
**Course Year:** 2U  
**Course Semester:** 3U  
**Lectures/Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**End Sem. Exam Hours:** 3  
**Total No. of Lectures:** 45

---

#### **Course Objectives**
1. To impart basic concepts of data structures and algorithms.
2. To understand concepts related to searching and sorting techniques.
3. To learn about stacks, queues, lists, trees, and graphs.
4. To develop skills in writing algorithms and solving problems with data structures.
5. To understand the various applications of different data structures.

#### **Course Outcomes**
By the end of this course, students should be able to:
1. Analyze algorithms and determine their correctness.
2. Understand hashing and collision resolution techniques.
3. Perform operations related to stacks, queues, and linked lists.
4. Comprehend tree and graph concepts.
5. Summarize searching and sorting techniques.

#### **Units**

**Unit I: Introduction**
- Data types in C, pointers, one and two-dimensional arrays, structure parameters, recursion, hashing techniques.

**Unit II: Stack & Linked List**
- Stack definition, push/pop operations, queue as an ADT, priority queue, linked lists (circular and doubly linked).

**Unit III: Tree Representation**
- Binary trees, operations, tree traversals, expression tree evaluation.

**Unit IV: Searching & Sorting**
- Sorting techniques like bubble sort, quick sort, selection sort, and heap sort. Efficiency considerations.

**Unit V: Graphs**
- Graph applications, traversal methods, depth-first and breadth-first traversal, shortest path algorithms, and minimum spanning trees.

#### **Textbooks**
- "Data Structures Using C" by Aaron M. Tenenbaum et al.
  
#### **References**
- "Programming in ANSI C" by E. Balagurusamy
- "Data Structures and Program Design in C" by Robert L. Kruse et al.

---

### **DISCRETE STRUCTURE**

**Course Code:** BCA209  
**Course Credits:** 3  
**Course Category:** CC13  
**Course Year:** 2U  
**Course Semester:** 3U  
**Lectures/Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**End Sem. Exam Hours:** 3  
**Total No. of Lectures:** 45

---

#### **Course Objectives**
1. Understand logical notation and validity of arguments.
2. Learn proof techniques.
3. Gain knowledge in recursive functions and solving recurrence relations.
4. Understand sets, relations, functions, and their operations.

#### **Course Outcomes**
By the end of this course, students should be able to:
1. Use logical notation effectively.
2. Perform logical proofs.
3. Solve recurrence relations.
4. Understand the basics of counting and combinatorics.

#### **Units**

**Unit 1: Set Theory**
- Definitions, Venn diagrams, relations, and functions.

**Unit 2: Lattices**
- Lattice properties, Hasse diagram, modular lattices.

**Unit 3: Boolean Algebra**
- Sum of products, logic gates, and Karnaugh maps.

**Unit 4: Propositional & Predicate Logic**
- Truth tables, tautology, contradictions, inference theory.

**Unit 5: Recurrence Relation**
- Solving recurrence relations, combinatorics, counting techniques.

---

### **BASICS OF DIGITAL MARKETING**

**Course Code:** BCA211  
**Course Credits:** 3  
**Course Category:** CC14  
**Course Year:** 2U  
**Course Semester:** 3U  
**Lectures/Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**End Sem. Exam Hours:** 3  
**Total No. of Lectures:** 45

---

#### **Course Objectives**
1. Understand the advantages of digital marketing.
2. Learn to formulate and manage a digital marketing plan.
3. Use digital marketing metrics for decision-making.
4. Understand mobile marketing and analytics.

#### **Course Outcomes**
By the end of this course, students should be able to:
1. Understand digital marketing concepts.
2. Identify key digital marketing channels.
3. Manage relationships across digital platforms.
4. Create, measure, and optimize display ad campaigns.

#### **Units**

**Unit 1: Introduction to Digital Marketing**
- Trends, comparison with traditional marketing, ROI of digital strategies.

**Unit 2: Social Media Marketing**
- Blogging, Facebook, Twitter, Instagram, LinkedIn, YouTube.

**Unit 3: Digital Channels**
- Content and branding, SEM, mobile marketing, email marketing.

**Unit 4: SEO**
- On-page and off-page SEO, Google Ads, SEO tools.

**Unit 5: Digital Marketing Budgeting**
- Resource planning, budgeting, cost control, and digital trends.

---

### **PYTHON PROGRAMMING LAB**

**Course Code:** BCA281  
**Course Credits:** 2  
**Course Category:** CC-L  
**Course Year:** 2U  
**Course Semester:** 3U  
**Lectures/Tutorials (Hrs/Week):** 03  
**Mid Sem. Exam Hours:** 1  
**End Sem. Exam Hours:** 3  
**Total No. of Lectures:** 10

---

#### **Course Objectives**
1. Understand Python fundamentals and basic operations.
2. Learn about conditions, loops, string and list functions.
3. Study tuples, sets, dictionaries, file handling, and OOPs features.

#### **Course Outcomes**
By the end of this course, students should be able to:
1. Use operators, loops, and functions in Python.
2. Work with Python data types like strings, lists, dictionaries, sets, and tuples.
3. Develop functions and work with files.
4. Implement error handling and interact with databases.

#### **Sample Programs**
1. Find the largest/smallest of two numbers.
2. Calculate the sum of a series using a given formula.
3. Check if a number is perfect.
4. Perform matrix operations (addition and multiplication).
5. Read from a file and manipulate text.

--- 

Here's a more readable format for the course details you provided:

---

### **DATABASE MANAGEMENT SYSTEM LAB**

- **Course Code:** BCA 283
- **Credits:** 2
- **Category:** CC-L
- **Course Year:** 2U
- **Course Semester:** 3U
- **Lectures/Tutorials per Week:** 2 hours
- **Mid Sem Exam:** 1 hour
- **Total Lectures (L + T):** 10
- **End Sem Exam:** 3 hours

#### **Course Objectives:**
1. Explain basic database concepts, data models, schemas, and instances.
2. Demonstrate the use of constraints and relational algebra operations.
3. Introduce MYSQL and query construction.
4. Emphasize the importance of normalization.
5. Facilitate database design skills.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Apply basic database concepts and applications.
2. Construct SQL queries for database creation and interaction.
3. Design commercial relational database systems using SQL.
4. Develop and evaluate database applications.
5. Utilize views, triggers, and procedures in SQL.
6. Write queries for Data Manipulation and Data Definition Language (DML/DDLS).
7. Implement SQL operations such as `GROUP BY`, subqueries, and joins.
8. Develop a Library Management System or other database applications.

---

### **FUNDAMENTALS OF JAVA PROGRAMMING**

- **Course Code:** BCA 202
- **Credits:** 3
- **Category:** CC
- **Course Year:** 2U
- **Course Semester:** 4U
- **Lectures/Tutorials per Week:** 3 hours
- **Mid Sem Exam:** 1 hour
- **Total Lectures (L + T):** 45
- **End Sem Exam:** 3 hours

#### **Course Objectives:**
1. Teach object-oriented programming principles like abstraction, encapsulation, inheritance, and polymorphism.
2. Impart Java fundamentals including class creation and method invocation.
3. Familiarize students with packages and interfaces.
4. Introduce exception handling.
5. Demonstrate event handling in GUI programming.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Understand and apply object-oriented principles in Java.
2. Design, develop, and interpret object-oriented Java programs.
3. Design object-oriented systems and multithreaded applications.
4. Prepare for competitive exams like GATE.
5. Explore Java-based technologies like Hadoop.

---

### **FUNDAMENTALS OF MACHINE LEARNING**

- **Course Code:** BCA 204
- **Credits:** 3
- **Category:** CC
- **Course Year:** 2U
- **Course Semester:** 4U
- **Lectures/Tutorials per Week:** 3 hours
- **Mid Sem Exam:** 1 hour
- **Total Lectures (L + T):** 45
- **End Sem Exam:** 3 hours

#### **Course Objectives:**
1. Explain how machine learning learns patterns from data.
2. Design and analyze machine learning algorithms.
3. Explore supervised and unsupervised learning paradigms.
4. Introduce dimensionality reduction and feature extraction techniques.
5. Develop data analysis and machine learning solution skills.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Recognize the usefulness of machine learning for real-world problems.
2. Compare machine learning techniques and know when to use them.
3. Analyze machine learning approaches mathematically.
4. Understand supervised, semi-supervised, and unsupervised learning algorithms.
5. Understand neural networks.

---

### **INTRODUCTION TO INFORMATION SECURITY**

- **Course Code:** BCA 206
- **Credits:** 3
- **Category:** CC
- **Course Year:** 2U
- **Course Semester:** 4U
- **Lectures/Tutorials per Week:** 3 hours
- **Mid Sem Exam:** 1 hour
- **Total Lectures (L + T):** 45
- **End Sem Exam:** 3 hours

#### **Course Objectives:**
1. Develop an understanding of data, information, and security requirements.
2. Create awareness about information security principles and risk management.
3. Learn about cryptographic algorithms and their operations.
4. Understand entity verification in networks and web security protocols.
5. Gain knowledge on security policies, violations, and cybercrimes.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Understand information security fundamentals.
2. Apply security principles and risk management processes.
3. Understand and apply cryptographic algorithms.
4. Comprehend web and network security protocols.
5. Understand information security policies, standards, and cybercrime laws.

---
---

### **Theory of Computation**  
**Course Code:** BCA208  
**Course Credits:** 3  
**Course Category:** CC  
**Course Year:** 2  
**Course Semester:** 4  
**Lectures + Tutorials:** 3 hours/week  
**Mid-Semester Exam Hours:** 1  
**Total No. of Lectures:** 45  
**End-Semester Exam Hours:** 3

#### **Course Objectives:**
1. Understand basic concepts of theory of computation.
2. Gain a general understanding of regular expressions.
3. Learn about context-free grammar (CFG) and context-free languages (CFL).
4. Understand pushdown automata in theory of computation.
5. Learn about Turing machines.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Understand basic concepts of theory of computation.
2. Understand regular expressions.
3. Grasp the concept of CFG and CFL.
4. Understand the definition and operation of pushdown automata.
5. Understand Turing machines and their relevance.

#### **Units:**

**Unit I: Introduction**
- Alphabets, strings, and languages.
- Automata and grammars.
- Deterministic Finite Automata (DFA): formal definition, state transition graph, transition table, DFA language.
- Nondeterministic Finite Automata (NFA), NFA with epsilon transition, NFA language.

**Unit II: Regular Expressions**
- Definition and operators.
- Algebraic laws, pumping lemma, and closure properties of regular languages.
- FA with output: Moore and Mealy machines.

**Unit III: Context-Free Grammar (CFG)**
- Definitions and examples.
- Derivation and derivation trees.
- Ambiguity, simplification, and normal forms for CFGs: CNF and GNF.
- Closure properties of CFLs.

**Unit IV: Pushdown Automata (PDA)**
- Description, instantaneous description, language of PDA.
- Acceptance by final state or empty stack.
- Deterministic PDA and equivalence with CFG.

**Unit V: Turing Machines (TM)**
- Basic model, representation, instantaneous description.
- Variants of Turing machines and their computational functions.
- Halting problem, undecidability, and undecidable problems.

#### **Reference Books:**
1. "Introduction to Automata Theory, Languages and Computation" by Hopcroft & Ullman.
2. "Theory of Computer Science: Automata, Languages, and Computation" by K.L.P. Mishra & N. Chandrasekaran.
3. "Introduction to Languages and Theory of Computations" by Martin J. C.
4. "Elements of the Theory of Computation" by Papadimitrou & Lewis.

---

### **Introduction to Soft Computing**  
**Course Code:** BCA212  
**Course Credits:** 2  
**Course Category:** CC  
**Course Year:** 2  
**Course Semester:** 4  
**Lectures + Tutorials:** 2 hours/week  
**Mid-Semester Exam Hours:** 1  
**Total No. of Lectures:** 30  
**End-Semester Exam Hours:** 3

#### **Course Objectives:**
1. Introduce basic principles and applications of soft computing.
2. Develop an understanding of neural networks and fuzzy logic.
3. Introduce artificial neural networks and fuzzy theory.
4. Provide mathematical background for optimization in neural network learning.
5. Explore current research problems in soft computing through practical projects.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Describe human intelligence and AI.
2. Explain how intelligent systems work.
3. Apply fuzzy logic and neural networks.
4. Discuss fuzzy sets, fuzzy logic, and heuristics.
5. Understand genetic algorithms and other random search methods.

#### **Units:**

**Unit I: Introduction to Soft Computing**
- Overview of soft computing techniques: Fuzzy Logic, Artificial Neural Networks (ANN), Evolutionary Computing.
- Applications of soft computing.

**Unit II: Fuzzy Logic**
- Classical and fuzzy sets.
- Operations on fuzzy sets: complement, intersection, union, and other combinations.

**Unit III: Artificial Neural Networks**
- Basic concepts, biological neurons, and the mathematical model of neurons.
- ANN architecture and different network layers.

**Unit IV: Learning Fundamentals**
- Supervised, unsupervised, and reinforced learning.
- ANN training algorithms and their applications.

**Unit V: Genetic Algorithms**
- Concepts, biological background, and principles.
- Fitness function and algorithm structure.

#### **Textbooks:**
1. "Artificial Neural Networks: An Introduction" by Peteus J. Braspenning.
2. "Fuzzy Logic: A Spectrum of Theoretical and Practical Issues" by Paul P. Wang.

#### **Reference Books:**
1. "Fuzzy Sets, Fuzzy Logic, and Fuzzy Systems" by Lotfi A. Zadeh.
2. "Neural Networks Theory" by Patricia Melin.
3. "Neural Networks Theory and Application" by Oscar Castillo.

---

### **Java Programming Lab**  
**Course Code:** BCA282  
**Course Credits:** 3  
**Course Category:** CC  
**Course Year:** 2  
**Course Semester:** 4  
**Lectures + Tutorials:** 3 hours/week  
**Mid-Semester Exam Hours:** 1  
**Total No. of Lectures:** 45  
**End-Semester Exam Hours:** 3

#### **Course Objectives:**
1. Introduce students to Java programming concepts.
2. Teach Java execution steps and environments.
3. Familiarize students with various application areas of Java.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Understand the Java Development Kit and online compilers.
2. Grasp data handling concepts in Java.
3. Understand the flow of data in Java programs.
4. Explore Java's diverse application areas.
5. Implement solutions using Java.

#### **Sample Programming Tasks:**
1. Create a class and object in Java.
2. Demonstrate inheritance and other OOP concepts.
3. Implement file reading and writing in Java.
4. Work with constructors, method overloading, and overriding.
5. Handle exceptions using try-catch-finally blocks.

---

### **PHP**  
**Course Code:** BCA301  
**Course Credits:** 3  
**Course Category:** CC21  
**Course Year:** 3  
**Course Semester:** 5  
**Lectures + Tutorials:** 3 hours/week  
**Mid-Semester Exam Hours:** 1  
**Total No. of Lectures:** 45  
**End-Semester Exam Hours:** 3

#### **Course Objectives:**
1. Learn the basics of PHP programming.
2. Understand PHP data types and web page creation.
3. Explore session handling, cookies, and dynamic web pages.

#### **Course Outcomes:**
At the end of the course, students should be able to:
1. Set up a server-side scripting environment.
2. Use control structures and PHP native data types.
3. Handle HTML forms, files, and directories in PHP.
4. Work with sessions, cookies, and database connectivity.

#### **Units:**

**Unit I: Introduction to PHP**
- PHP basics, syntax, variables, constants, data types, operators, and loops.

**Unit II: Functions and Arrays**
- Functions: Call by value, call by reference, recursive functions.
- Arrays: Indexed and associative arrays, useful library functions.

**Unit III: Handling HTML Forms**
- Capturing form data, file upload, working with files and directories.

**Unit IV: Session and Cookie Management**
- Introduction to sessions and cookies, setting and using cookies.

**Unit V: Database Connectivity**
- RDBMS basics, MySQL database connection, SQL queries, and exception handling.

#### **Textbooks:**
1. "Learning PHP, MySQL" by O'Reilly Press.
2. "Teach Yourself PHP in 24 Hours" by Matt Zandstra.

---
---

**INTRODUCTION TO COMPILER DESIGN**

**Course Code:** BCA303  
**Course Credits:** 3  
**Course Category:** CC22  
**Course (U / P):** U  
**Course Year (U / P):** 3U  
**Course Semester (U / P):** 5U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

### **COURSE OBJECTIVES**
1. Learn the process of translating a modern high-level language to executable code.
2. Develop an awareness of the function and complexity of modern compilers.
3. Apply code generation algorithms to create machine code for optimized execution.
4. Represent target code in one of the code formats.
5. Apply optimization techniques for better code generation.

### **COURSE OUTCOMES**
By the end of the course, students should be able to:
1. Understand the major phases of compilation and the use of Lex & YAAC tools.
2. Develop parsers and experiment with different parser designs without automated tools.
3. Construct intermediate code representations and generation.
4. Convert source code for a novel language into machine code.
5. Apply various optimization techniques for dataflow analysis.

### **UNIT I: INTRODUCTION TO COMPILER**
- Phases of Compilation
- Lexical Analysis, Regular Grammar, Regular Expressions for common programming features
- Data structures in compilation
- Lex lexical analyzer generator

### **UNIT II: PARSING TECHNIQUE**
- Context-free grammars
- Top-down Parsing: LL(1), Recursive descent, Predictive Parsing
- Bottom-up Parsing: Shift-Reduce, LR and LALR parsing
- Error recovery and handling ambiguous grammar

### **UNIT III: SYNTAX-DIRECTED TRANSLATION**
- Semantic analysis and intermediate code forms (abstract syntax tree, polish notation, three address codes)
- Syntax-directed translation
- Symbol Tables: Format, organization, block structure
- Storage allocation: Static, Runtime stack, heap allocation

### **UNIT IV: SYMBOL TABLES & CODE OPTIMIZATION**
- Considerations for optimization
- Local optimization, loop optimization, frequency reduction
- Data flow analysis and global optimization
- Redundant sub-expression elimination, Live variable analysis

### **UNIT V: CODE GENERATION**
- Object code generation
- Register allocation and generic code generation algorithms

**Text Books:**  
1. Alfred Aho, Ravi Sethi, Jeffrey D Ullman, "Compilers: Principles, Techniques and Tools", Pearson Education Asia, 2003  
**Reference Books:**  
1. Allen I. Holub, "Compiler Design in C", Prentice Hall of India, 2003  
2. C. N. Fischer and R. J. LeBlanc, "Crafting a Compiler with C", Benjamin Cummings, 2003  

---

**BASICS OF COMPUTER GRAPHICS**

**Course Code:** BCA305  
**Course Credits:** 3  
**Course Category:** CC23  
**Course (U / P):** U  
**Course Year (U / P):** 3U  
**Course Semester (U / P):** 5U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

### **COURSE OBJECTIVES**
1. Introduction to basic concepts of computer graphics.
2. Develop programming skills in computer graphics through assignments.
3. Understand image transformation in 2D/3D and geometric transformations.

### **COURSE OUTCOMES**
By the end of the course, students should be able to:
1. Understand basic concepts of computer graphics.
2. Understand various algorithms for scan conversion and filling basic objects.
3. Apply geometric transformations on graphics objects.
4. Use of illumination models for rendered projections in 2D views.

### **UNIT I: GRAPHICS PRIMITIVES**
- Introduction to computer graphics and systems
- Video-display devices and input devices

### **UNIT II: OUTPUT PRIMITIVES**
- Points, lines, and algorithms (mid-point circle, ellipse)
- Filled area primitives: Scan-line polygon fill, boundary and flood-fill algorithms
- 2D Geometrical Transforms: Translation, scaling, rotation, reflection, shear transformations

### **UNIT III: 2D VIEWING**
- The viewing pipeline, window-to-viewport coordinate transformation
- Line and polygon clipping (Cohen-Sutherland, Cyrus-Beck, Sutherland-Hodgeman)

### **UNIT IV: 3D OBJECT REPRESENTATION**
- Polygon surfaces, quadric surfaces, spline representation (Hermite, Bezier, B-Spline curves)
- Illumination models and polygon-rendering methods

### **UNIT V: 3D GEOMETRIC TRANSFORMATIONS**
- 3D transformations: Translation, rotation, scaling, reflection, shear
- Composite transformations and 3D viewing pipeline

**Text & Reference Books:**  
1. Donald Hearn, M. Pauline Baker, "Computer Graphics", PHI Publications  
2. Plastock, "Theory & Problem of Computer Graphics", Schaum Series  
3. Foley & Van Dam, "Fundamentals of Interactive Computer Graphics", Addison Wesley  

---

**COMPUTER NETWORKS FUNDAMENTALS**

**Course Code:** BCA307  
**Course Credits:** 3  
**Course Category:** CC24  
**Course (U / P):** U  
**Course Year (U / P):** 3U  
**Course Semester (U / P):** 5U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

### **COURSE OBJECTIVES**
1. Understanding computer networks and its components
2. General understanding of switching and OSI layers
3. Understanding network congestion and protocols
4. Understanding addressing in networks

### **COURSE OUTCOMES**
By the end of the course, students should be able to:
1. Understand network scenario and OSI/TCP-IP layers.
2. Understand network congestion and various protocols.
3. Create networks using IP addressing.

### **UNIT I: INTRODUCTION TO NETWORKS**
- Network applications, hardware, software, reference models (OSI, TCP/IP)
- Guided transmission media, wireless transmission

### **UNIT II: DATA LINK LAYER & MEDIUM ACCESS SUBLAYER**
- Data link design issues, error detection and correction, elementary protocols
- Multiple access protocols: Ethernet, wireless LAN, Bluetooth

### **UNIT III: NETWORK LAYER**
- Routing algorithms, congestion control, IPv4/IPv6, quality of service

### **UNIT IV: TRANSPORT LAYER**
- Transport service elements, UDP, TCP, and other internet transport protocols

### **UNIT V: APPLICATION LAYER**
- Domain Name System (DNS), electronic mail, World Wide Web (WWW), HTTP
- Protocols: SNMP, FTP, SMTP, Telnet

**Text Books:**  
1. A. S. Tanenbaum, "Computer Networks", 4th edition, Pearson Education  
**Reference Books:**  
1. Behrouz A. Forouzan, "Data Communication and Networking", 4th Edition, McGraw-Hill  
2. Kurose, Ross, "Computer Networking: A Top-Down Approach", Pearson Education  

---
---

### **FUNDAMENTALS OF CYBER SECURITY**

- **Course Code**: BCA 315
- **Course Credits**: 3
- **Course Category**: E1
- **Course Year**: 3U
- **Course Semester**: 5U
- **Lectures + Tutorials**: 03 + 00 (Hrs/Week)
- **Mid Sem. Exam Hours**: 1
- **Total Lectures**: 45 + 00
- **End Sem. Exam Hours**: 3

#### **Course Objectives**
1. To gain knowledge to secure systems, protect personal data, and ensure computer security.
2. To develop expertise in designing and implementing security solutions.
3. To understand key concepts in Cryptography, Governance, and Compliance.
4. To create cyber security strategies and policies.
5. To understand web security principles and monitor networks for secure operation.

#### **Course Outcomes**
By the end of the course, students should be able to:
1. Analyze and evaluate the cyber security needs of an organization.
2. Measure and troubleshoot the performance of cyber security systems.
3. Implement cyber security solutions and apply concepts of information assurance and cyber forensics.
4. Design a security architecture for an organization.
5. Develop operational and strategic cyber security strategies and policies.

#### **Units Overview**
- **Unit 1**: Introduction to Cyber Security (Challenges, threats, and need for policy and international conventions).
- **Unit 2**: Cyber Security Vulnerabilities (Vulnerabilities in software, weak authentication, unprotected communication, ethical hacking).
- **Unit 3**: Cyberspace and the Law (Cyber security regulations, standards, national policies).
- **Unit 4**: Cyber Forensics (Introduction, investigations, disk analysis, email header scrutiny).
- **Unit 5**: Securing Web Applications, Services, and Servers (HTTP security, SOAP services, identity management, authorization patterns).

---

### **INTRODUCTION TO MULTIMEDIA SYSTEM**

- **Course Code**: BCA 319
- **Course Credits**: 3
- **Course Category**: E2
- **Course Year**: 3U
- **Course Semester**: 5U
- **Lectures + Tutorials**: 03 + 00 (Hrs/Week)
- **Mid Sem. Exam Hours**: 1
- **Total Lectures**: 45 + 00
- **End Sem. Exam Hours**: 3

#### **Course Objectives**
1. Introduce fundamental elements of multimedia.
2. Learn the representations, perceptions, and applications of multimedia.
3. Understand the technologies behind multimedia applications.
4. Study the fundamental elements in multimedia such as images, sound, and video.

#### **Course Outcomes**
By the end of the course, students should be able to:
1. Summarize key concepts in multimedia technology.
2. Create multimedia software.
3. Understand how text, sound, images, and video are digitized.
4. Integrate multimedia data into projects.

#### **Units Overview**
- **Unit 1**: Introduction to Multimedia (Components, web multimedia applications, digital media transition).
- **Unit 2**: Audio Fundamentals (Digitization of sound, MIDI, audio recording, compression, and transmission).
- **Unit 3**: Image Fundamentals (Color science, color models, image compression, photo retouching).
- **Unit 4**: Video and Animation (Video basics, formats, compression, animation techniques).
- **Unit 5**: Multimedia Authoring (Tools like Macromedia Director & Flash).

---

### **PHP LAB**

- **Course Code**: BCA 381
- **Course Credits**: 3
- **Course Category**: CC-L
- **Course Year**: 3U
- **Course Semester**: 5U
- **Lectures + Tutorials**: 03 + 00 (Hrs/Week)
- **Mid Sem. Exam Hours**: 1
- **Total Lectures**: 45 + 00
- **End Sem. Exam Hours**: 3

#### **Course Objectives**
1. Introduction to PHP, an open-source Web scripting language.
2. Learn to build dynamic web applications using PHP.
3. Understand PHP syntax and semantics and its integration with HTML.
4. Write server-side scripts for dynamic web pages interacting with databases.

#### **Course Outcomes**
By the end of the course, students should be able to:
1. Handle HTML forms using PHP.
2. Write regular expressions in PHP.
3. Use PHP functions to manipulate files and directories.
4. Analyze and solve database tasks using PHP.
5. Solve common web application tasks using PHP.

#### **Experiments Overview**
1. Study web standards and design forms using HTML, CSS, JavaScript.
2. Learn basic PHP programming and use XAMPP and Dreamweaver.
3. Write PHP programs for typecasting, control structures, and loops.
4. Use PHP for form handling, session handling, and MySQL database connectivity.

---

### **INTRODUCTION TO COMPILER DESIGN LAB**

- **Course Code**: BCA 383
- **Course Credits**: 2
- **Course Category**: CC-L
- **Course Year**: 3U
- **Course Semester**: 5U
- **Lectures + Tutorials**: 03 + 00 (Hrs/Week)
- **Mid Sem. Exam Hours**: N/A
- **Total Lectures**: 10 + 00
- **End Sem. Exam Hours**: 3

#### **Course Objectives**
1. Learn the basics of compiler design and apply them to real-world applications.
2. Introduce different translation languages.
3. Learn compiler generation tools and techniques.
4. Understand how compilers work and how to design one for a simple programming language.

#### **Course Outcomes**
By the end of the course, students should be able to:
1. Understand major phases of compilation and tools like Lex and YACC.
2. Write code using YACC and Lex for parsing.
3. Apply different types of parsing techniques.
4. Convert source code into machine code for a new language.

#### **Experiments Overview**
1. Define and use Lex and YACC tools.
2. Write programs for grammar checks, parse trees, regular expressions, and syntax analysis.
3. Implement basic compiler features like FIRST and FOLLOW sets, left recursion removal, and pushdown automata.

---

**SEMESTER VI**

---

### **.NET Technology**
**Course Code**: BCA 302  
**Course Credits**: 3  
**Course Category**: CC  
**Course Year**: 3U  
**Course Semester**: 6U  
**No. of Lectures + Tutorials (Hrs/Week)**: 03 + 00  
**Mid Sem. Exam Hours**: 1  
**Total No. of Lectures (L + T)**: 45 + 00  
**End Sem. Exam Hours**: 3  

#### **Course Objectives**:
1. Introduction to the .NET framework.
2. Building multi-tier enterprise applications.
3. ASP.NET Web services and web service security.
4. Client/Server Programming and 3-tier architecture.
5. Simple Object Access Protocol (SOAP) and Web Services.

#### **Course Outcomes**:
By the end of the course, students should be able to:
1. Understand the development and deployment cycles of enterprise applications.
2. Utilize the .NET framework to build distributed enterprise applications.
3. Develop ASP.NET Web Services, secure web services, and .NET remoting applications.
4. Understand the 3-tier software architecture (presentation/client tier, application tier, data tier) and develop multi-tier applications.
5. Develop web applications using a combination of client-side (JavaScript, HTML, XML, WML) and server-side technologies (ASP.NET, ADO.NET).

#### **Units**:
**UNIT I**: Introduction to .NET Framework  
- Basics of .NET Framework, 3-tier architecture, assemblies, CLR, execution of assembly code, JIT, .NET framework class library, metadata, interoperability with unmanaged code, etc.

**UNIT II**: Understanding the Development Environment  
- Projects & Solutions, Visual Studio Interface, Designing Visual Components, Navigational Features, Understanding Window Forms.

**UNIT III**: Introduction to VB .Net  
- Data Types, Operators, Arrays, Constructors, Destructors, and User Interface in VB.NET.

**UNIT IV**: Working with Database  
- ADO.Net architecture, database connections, data manipulation, and updates using ADO.Net.

#### **Textbooks/Reference Books**:
1. Jeffrey Richter, Francesco Balena: Applied .Net Framework.
2. Michael Halvorsan: Microsoft Visual Basic .NET Step by Step, PHI Publication.
3. Rebecca M. Riordan: Microsoft ADO.NET Step By Step, PHI Publication.

---

### **Basics of Internet of Things (IoT)**
**Course Code**: BCA 304  
**Course Credits**: 3  
**Course Category**: CC  
**Course Year**: 3U  
**Course Semester**: 6U  
**No. of Lectures + Tutorials (Hrs/Week)**: 03 + 00  
**Mid Sem. Exam Hours**: 1  
**Total No. of Lectures (L + T)**: 45 + 00  
**End Sem. Exam Hours**: 3  

#### **Course Objectives**:
1. Understand IoT and how it works.
2. Recognize the factors contributing to the emergence of IoT.
3. Design and program IoT devices.
4. Use IoT communication protocols.
5. Understand data transfer within IoT cloud providers.

#### **Course Outcomes**:
By the end of the course, students should be able to:
1. Understand IoT concepts, design, and protocols.
2. Recognize the building blocks of IoT infrastructure.
3. Understand cloud communication within IoT systems.

#### **Units**:
**UNIT I**: Introduction to IoT  
- Definitions, requirements, motivation, architecture, Web 3.0 view of IoT, applications, and the IoT toolkit approach.

**UNIT II**: IoT Protocols  
- Protocol standardization efforts, M2M, WSN protocols, SCADA, RFID, and security issues.

**UNIT III**: Web of Things (WoT)  
- Web vs. IoT, WoT architecture, cloud of things, mobile cloud computing, cloud providers, and system architecture.

**UNIT IV**: Integrated IoT Billing Solutions  
- Business models, network dynamics, population models, and the small-world phenomenon.

**UNIT V**: Applications  
- IoT in collaborative production environments, smart grids, and electric vehicle charging.

#### **Textbooks**:
1. Daniel Minoli: "Building the Internet of Things with IPv6 and MIPv6".
2. Bernd Scholz-Reiter: "Architecting the Internet of Things".
3. Parikshit N. Mahalle & Poonam N. Railkar: "Identity Management for IoT".

---

### **.NET Technology Lab**
**Course Code**: BCA 382  
**Course Credits**: 3  
**Course Category**: CC  
**Course Year**: 3U  
**Course Semester**: 6U  
**No. of Lectures + Tutorials (Hrs/Week)**: 03 + 00  
**Mid Sem. Exam Hours**: None  
**Total No. of Lectures (L + T)**: 10  
**End Sem. Exam Hours**: 3  

#### **Course Objectives**:
1. Build Windows applications using Visual Basic .NET.
2. Design/develop GUI-based programs.
3. Use ADO.NET and other .NET tools for database interaction.

#### **Course Outcomes**:
By the end of the course, students should be able to:
1. Understand .NET Framework and Visual Basic.
2. Create Windows Forms applications using Visual Basic.
3. Develop applications that use ADO.NET for database connectivity.

#### **Suggested Experiments**:
1. Program to perform arithmetic operations (add, subtract, multiply, divide) in a console application.
2. Program to display first 10 natural numbers and their sum.
3. Program to convert input string from lower to upper and vice versa.
4. Simple calculator program using Windows application.
5. Database connectivity using ADO.NET.

---

### **Internet of Things Lab**
**Course Code**: BCA 384  
**Course Credits**: 3  
**Course Category**: CC  
**Course Year**: 3U  
**Course Semester**: 6U  
**No. of Lectures + Tutorials (Hrs/Week)**: 03 + 00  
**Mid Sem. Exam Hours**: None  
**Total No. of Lectures (L + T)**: 45 + 00  
**End Sem. Exam Hours**: 3  

#### **Course Objectives**:
1. Develop basic programming skills for IoT.
2. Learn graphical programming and hardware interfacing.
3. Design and develop Android apps for Smart Home Automation.

#### **Course Outcomes**:
By the end of the course, students should be able to:
1. Demonstrate sensor interfacing using visual programming.
2. Analyze physical computing techniques.
3. Design mobile applications for IoT systems.

#### **Suggested Experiments**:
1. LED Blink and Pattern.
2. Push Button Control for LED Patterns.
3. Temperature Sensor (LM35).
4. Analog Inputs and Digital Outputs.
5. IR Sensor Analog Input.

--- 
---

### Electives

---

**Basics of Blockchain**

**Course Code:** BCA310  
**Course Credits:** 3  
**Course Category:** CC  
**Course Year:** 3U  
**Course Semester:** 6U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

**Course Objectives:**
1. Introduce the concept of blockchains.
2. Understand the mechanism and working of blockchains in existing applications.
3. Understand the cryptographic advantages of blockchains in various domains (e.g., financial, medical).
4. Explore Ethereum blockchain technology and its applications, and gain a working knowledge of smart contracts.
5. Learn about various blockchain applications and their impact across all domains.

**Course Outcomes:**  
By the end of this course, students should be able to:  
1. Understand the fundamentals of Blockchain technology.  
2. Recognize the cryptographic benefits of blockchain over traditional systems in finance, medicine, and other domains.  
3. Understand cryptocurrency (such as Bitcoin) and its uses.  
4. Gain practical knowledge of Ethereum and smart contracts.  
5. Analyze the use of blockchains across various applications.

**Unit 1: Introduction to Cryptography and Blockchain:**  
- What is Blockchain, its mechanisms & networks.  
- Blockchain origins and challenges.  
- Transactions, blocks, P2P systems, keys as identity, digital signatures, hashing, public/private blockchains.  

**Unit 2: Bitcoin and Cryptocurrency:**  
- Introduction to Bitcoin, the Bitcoin Network, and the Bitcoin Mining Process.  
- Bitcoin Wallets, decentralization, and hard forks.  
- Ethereum Virtual Machine (EVM), Merkle Tree, Double-Spend Problem.  

**Unit 3: Introduction to Ethereum:**  
- Overview of Ethereum, consensus mechanisms, and how smart contracts work.  
- Metamask setup, Ethereum accounts, transactions, and smart contracts.  
- Introduction to Hyperledger and Distributed Ledger Technology.

**Unit 4: Solidity Programming:**  
- Basics of Solidity, layout of a Solidity source file, and smart contract structure.  
- Introduction to data types in Solidity (e.g., int, real, string, arrays, mapping, etc.).

**Unit 5: Blockchain Applications:**  
- Use cases in Internet of Things, Medical Record Management, Domain Name Services, and more.

**References:**  
1. Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew Miller, and Steven Goldfeder, *Bitcoin and Cryptocurrency Technologies*, Princeton University Press.  
2. Antonopoulos, *Mastering Bitcoin*.  
3. Antonopoulos and G. Wood, *Mastering Ethereum*.

---

**Basics of Data Science**

**Course Code:** BCA318  
**Course Credits:** 3  
**Course Category:** CC  
**Course Year:** 3U  
**Course Semester:** 6U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

**Course Objectives:**  
1. Introduce students to data science.  
2. Explain the core concepts of data science.  
3. Familiarize students with the data science project lifecycle.  
4. Expose students to different domains and applications of data science.  
5. Enable students to implement data science projects.

**Course Outcomes:**  
By the end of this course, students should be able to:  
1. Understand the evolution of data science.  
2. Grasp the key concepts of data science.  
3. Familiarize with the flow of data science projects.  
4. Be aware of the various applications of data science.  
5. Implement data science projects.

**Unit 1: Introduction to Data Science:**  
- Evolution, roles, and stages in a data science project.  
- Applications and data security issues.

**Unit 2: Data Collection and Pre-Processing:**  
- Data collection strategies.  
- Data cleaning, integration, transformation, reduction, and discretization.

**Unit 3: Exploratory Data Analytics:**  
- Descriptive statistics (mean, skewness, kurtosis).  
- Box plots, pivot tables, heat maps, ANOVA.

**Unit 4: Model Development:**  
- Simple and multiple regression.  
- Polynomial regression and pipelines.  
- Measures for evaluation and prediction.

**Unit 5: Model Evaluation:**  
- Generalization error and out-of-sample evaluation metrics.  
- Cross-validation, overfitting, underfitting, and model selection.

**References:**  
1. Jojo Moolayil, *Smarter Decisions: The Intersection of IoT and Data Science*, PACKT.  
2. Cathy O'Neil and Rachel Schutt, *Doing Data Science*, O'Reilly.  
3. David Dietrich, Barry Heller, Beibei Yang, *Data Science and Big Data Analytics*, EMC 2013.

---

**Computer Vision**

**Course Code:** BCA316  
**Course Credits:** 3  
**Course Category:** CC  
**Course Year:** 4U  
**Course Semester:** 7U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

**Course Objectives:**  
1. Understand the camera model and image formation in computer vision.  
2. Learn about different filters and features.  
3. Explore clustering, grouping, and model fitting.  
4. Study the registration of different objects.  
5. Implement computer vision using machine learning.

**Course Outcomes:**  
By the end of this course, students should be able to:  
1. Understand how the camera model works and apply different color shading techniques.  
2. Use filters and features for image analysis.  
3. Apply clustering, grouping, and model fitting.  
4. Register rigid and deformable objects.  
5. Implement machine learning techniques in computer vision.

**Unit 1: Introduction to Computer Vision:**  
- Overview of low, mid, and high-level computer vision.  
- Applications: Document image analysis, biometrics, object recognition, medical image analysis, augmented reality, etc.

**Unit 2: Image Formation Models:**  
- Monocular and binocular imaging systems.  
- Camera model, calibration, and 3D model construction from images.

**Unit 3: Image Processing and Feature Extraction:**  
- Edge detection, motion estimation, stereo vision, and structure from motion.

**Unit 4: Shape Representation and Segmentation:**  
- Contour and region-based representation.  
- Snakes, active contours, Fourier and wavelet descriptors.

**Unit 5: Object Recognition:**  
- Hough transforms, shape matching, PCA.  
- Pattern recognition methods and shape priors for recognition.

**Unit 6: Applications:**  
- Face detection, recognition, eigenfaces, and surveillance.  
- In-vehicle vision system: Locating roadways, road signs, and pedestrians.

**Reference Books:**  
1. D. Forsyth and J. Ponce, *Computer Vision: A Modern Approach*, Prentice Hall.  
2. B. K. P. Horn, *Robot Vision*, McGraw-Hill.  
3. R. C. Gonzalez, R. E. Woods, *Digital Image Processing*, Addison Wesley Longman.  
4. Richard Szeliski, *Computer Vision: Algorithms and Applications*, Springer.

--- 
---

### **Introduction to Wireless Technology**
**Course Code:** BCA 312  
**Course Credits:** 3  
**Course Category:** CC  
**Course Year:** 3U  
**Course Semester:** 5U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

**COURSE OBJECTIVES:**
1. Enable students to acquire in-depth knowledge in wireless communication technology and integrate existing and new knowledge with advancements.
2. Develop students' ability to critically analyze problems and find optimal solutions in wireless communication technology.
3. Train students to conduct research and experiments with appropriate techniques and tools for sustainable development.
4. Prepare students to act as team members or leaders to manage projects efficiently in the field of wireless communication.
5. Train students to effectively communicate, write reports, create documentation, and present by adhering to appropriate standards.

**COURSE OUTCOMES:**
At the end of the course, students should be able to:
1. Independently carry out research/investigation and development work to solve practical problems.
2. Write and present a substantial technical report/document.
3. Gain mastery in wireless communication technology at a higher level than the requirements of the bachelor's program.
4. Select and apply appropriate techniques and tools in wireless communication technology, understanding limitations.
5. Manage wireless communication methodologies.

**UNIT I: Introduction to Wireless Communication System**  
- Overview of wireless communication and future vision.  
- Wireless communication systems and standards: satellite communication, GPS, paging system, cordless phones, wireless local loop, RFID.

**UNIT II: Cellular Fundamentals**  
- Cellular communication and frequency reuse, general architecture of a cellular system.  
- Channel assignment strategies, hand-off in a cellular system.  
- Interference and capacity in cellular systems: co-channel interference, adjacent channel interference, power control.  
- Evolution of mobile cellular communication: 1G, 2G, 2.5G, 3G, LTE, LTE-advanced, 4G, and 5G vision.

**UNIT III: Signal Propagation in Mobile Communication**  
- Mobile cellular environment, multipath propagation and fading.  
- Free space propagation model, path loss, outdoor propagation models (Okumura and Hata models).  
- Indoor propagation models, power delay profile, channel parameters.

**UNIT IV: Wireless Communication Networks**  
- Wireless Personal Area Networks (Bluetooth, UWB, ZigBee).  
- Wireless Local Area Networks (IEEE 802.11, network architecture, WLAN standards).  
- Wireless Metropolitan Area Networks (WiMAX), Ad-hoc Wireless Networks.

**UNIT V: Multiple Access Schemes**  
- Duplexing schemes, FDMA, TDMA, SDMA, spread spectrum techniques (CDMA, OFDMA).  
- ALOHA and CSMA protocols.

**Text Books:**
1. Andrea Goldsmith, "Wireless Communications", Cambridge University Press, 2005.  
2. Sanjay Kumar, "Wireless Communication: The Fundamentals and Advanced Concepts", River Publishers, 2015 (Indian reprint).

**Reference Books:**
1. Vijay K. Garg, "Wireless Communications and Networks", Morgan Kaufmann Publishers, USA, 2009.  
2. J. Schiller, "Mobile Communication", Pearson Education, 2012.  
3. Iti Saha Misra, "Wireless Communication and Networks: 3G and Beyond", 2/e, McGraw Hill Education, 2013.

---

### **Cloud Computing**
**Course Code:** BCA 319  
**Course Credits:** 3  
**Course Category:** E5/DSE  
**Course Year:** 4U  
**Course Semester:** 7U  
**No. of Lectures + Tutorials (Hrs/Week):** 03 + 00  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45 + 00  
**End Sem. Exam Hours:** 3  

**COURSE OBJECTIVES:**
1. Comprehensive and in-depth knowledge of Cloud Computing concepts.  
2. Understand technologies, architecture, and applications in cloud computing.  
3. Explore the fundamental issues, technologies, applications, and implementations of Cloud Computing.  
4. Expose students to frontier areas of Cloud Computing and information systems.  
5. Provide a foundation for further study and research in cloud computing.

**COURSE OUTCOMES:**
At the end of the course, students should be able to:
1. Define the principles of distributed computing.  
2. Understand the importance of virtualization and its role in Cloud Computing.  
3. Analyze the performance of Cloud Computing.  
4. Understand Cloud Security.  
5. Learn about Cloud Infrastructure models.

**UNIT 1: Introduction to Cloud Computing**  
- Definition, characteristics, and components of Cloud Computing.  
- Cloud provider models: SAAS, PAAS, IAAS, and others.  
- Deploying applications over the cloud.  
- Comparison of cloud computing platforms (e.g., Amazon EC2, Google App Engine, Microsoft Azure).

**UNIT 2: Introduction to Cloud Technologies**  
- Study of Hypervisors, SOAP, REST Web Services, AJAX, and Mashups.  
- Virtualization technology, applications in enterprises, and multi-tenant software models.  

**UNIT 3: Data in the Cloud**  
- Map-Reduce model, Cloud security fundamentals, privacy and security in cloud.  
- Cloud computing security architecture and identity management.

**UNIT 4: Cloud Computing Security Challenges**  
- Virtualization security management and VM security techniques.  
- Issues in cloud computing, real-time application deployment, inter-cloud environments, and QOS.

**UNIT 5: Cloud Computing Platforms**  
- Overview of Xen Cloud Platform, Eucalyptus, OpenNebula, Nimbus, and other cloud platforms.

**Text Books:**
1. Judith Hurwitz, R.Bloor, M.Kanfman, F.Halper, "Cloud Computing for Dummies" (Wiley India Edition).  
2. Gautam Shroff, "Enterprise Cloud Computing", Cambridge.  
3. Ronald Krutz and Russell Dean Vines, "Cloud Security", Wiley India.

---

### **Information Security**
**Course Code:** BCA 321  
**Course Credits:** 4  
**Course Category:** C  
**Course Year:** 3U  
**Course Semester:** 3U  
**No. of Lectures + Tutorials (Hrs/Week):** 03  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45  
**End Sem. Exam Hours:** 3  

**COURSE OBJECTIVES:**
1. Develop an understanding of data, information, and security requirements.  
2. Raise awareness about vulnerabilities, threats, and risk management in information security.  
3. Learn encryption algorithms and cryptographic operations.  
4. Understand entity authentication, network security protocols, and web security applications.  
5. Understand information security policies, violations, cybercrimes, laws, and standards.

**COURSE OUTCOMES:**
At the end of the course, students should be able to:
1. Understand information and security requirements.  
2. Implement risk management procedures in information security.  
3. Apply cryptographic algorithms and their applications.  
4. Understand network and web security protocols and defenses.  
5. Understand policies, standards, cybersecurity crimes, and laws.

**UNIT I: Introduction to Wireless Communication Systems**  
- Evolution of mobile communications, mobile radio systems, and wireless communication types.  
- Trends in cellular radio, second and third-generation wireless networks (GSM, WLAN, Bluetooth, etc.).

**UNIT II: Mobile Radio Propagation Model**  
- Path loss models, reflection, diffraction, scattering, and link budget design.  
- Small-scale fading, delay spread, and multipath propagation models.

**UNIT III: Multiple Access Techniques**  
- Comparison of TDMA, CDMA, FDMA, OFDM, and other protocols.  
- ALOHA, slotted ALOHA, and CSMA methods for wireless networks.

**UNIT IV: Wireless Systems**  
- GSM architecture, IS-95 CDMA system, GPRS architecture, power control in CDMA, RAKE receiver.

**UNIT V: Recent Trends**  
- Wi-Fi, WiMAX, ZigBee, Software Defined Radio, UWB Radio, and security challenges in wireless networks.

**Text Books:**
1. Theodore S. Rappaport, "Wireless Communication", Prentice Hall.  
2. Vijay Garg, "Wireless Communications and Networking", Elsevier.  
3. Kamilo Feher, "Wireless Digital Communication", PHI.  
4. William C. Y. Lee, "Mobile Communications Engineering", McGraw Hill.  
5. Raj Pandya, "Mobile and Personal Communication System and Services", IEEE Press.

---
---

### **Computer Network Security**
**Course Code:** BCA 306  
**Course Credits:** 4  
**Course Category:** C  
**Course Year:** 3U  
**Course Semester:** 3U  
**No. of Lectures + Tutorials (Hrs./Week):** 03  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45  
**End Sem. Exam Hours:** 3  

**Course Objectives:**  
1. To develop a fundamental understanding of data, information, and security requirements.  
2. To understand the basics of Cryptography and Network Security.  
3. To be able to secure messages over insecure channels.  
4. To learn how to maintain the Confidentiality, Integrity, and Availability of data.  
5. To understand various network security protocols to protect against threats.  

**Course Outcomes:**  
By the end of this course, students will be able to:  
1. Understand and analyze security requirements, and design classical encryption techniques and block ciphers.  
2. Understand and analyze data encryption standards.  
3. Understand and analyze public-key cryptography, RSA, and other public-key cryptosystems.  
4. Understand network and web security protocols and malicious codes like Diffie-Hellman Key Exchange, ElGamal Cryptosystem, etc.  
5. Understand key management and distribution schemes, and design user authentication methods.  

**Units Covered:**
- **Unit 1:** Security Fundamentals (Authentication, Authorization, Cipher Techniques)
- **Unit 2:** Cryptography (Symmetric and Public Key Algorithms)
- **Unit 3:** Message Digest & Key Management (Hash Algorithms, Key Management, PKI)
- **Unit 4:** Network Security (IPSec, SSL, IDS)
- **Unit 5:** Introduction to Cyber Security (Cybercrime, Legal Perspectives)
- **Unit 6:** Tools and Methods Used in Cybercrime (Phishing, Viruses, SQL Injection)

**Textbooks:**  
1. Bruice Schneier, "Applied Cryptography- Protocols, Algorithms, and Source Code in C"  
2. Nina Godbole, Sunit Belapure, "Cyber Security- Understanding Cyber Crimes, Computer Forensics and Legal Perspectives"  
3. Bernard Menezes, "Network Security and Cryptography"  

---

### **Fundamentals of Digital Image Processing**
**Course Code:** BCA 320  
**Course Credits:** 4  
**Course Category:** C  
**Course Year:** 3U  
**Course Semester:** 3U  
**No. of Lectures + Tutorials (Hrs./Week):** 03  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45  
**End Sem. Exam Hours:** 3  

**Course Objectives:**  
1. To study image fundamentals and mathematical transforms for image processing.  
2. To learn image enhancement techniques.  
3. To understand image restoration procedures.  
4. To study image compression procedures.  

**Course Outcomes:**  
By the end of this course, students will be able to:  
1. Understand different types of image transforms and their properties.  
2. Develop image processing applications.  
3. Understand the advances in machine vision.  
4. Learn techniques for enhancing images.  
5. Understand causes of image degradation and restoration techniques.  

**Units Covered:**
- **Unit 1:** Signal and System Review, Z transforms, Filter Design.
- **Unit 2:** DSP Transforms (Fourier, Discrete Sine & Cosine, Wavelet, etc.)
- **Unit 3:** Multi-rate DSP, Sampling Rate Conversion, Wavelet Decomposition.
- **Unit 4:** Linear Prediction & Optimum Filters (Wiener Filters)
- **Unit 5:** Power Spectrum Estimation (Parametric and Nonparametric Methods)

**Textbooks:**  
1. J.G. Proakis and D.G. Manolakis, "Digital Signal Processing: Principles, Algorithms, and Applications"  
2. N.J. Fliege, "Multirate Digital Signal Processing: Multirate Systems - Filter Banks - Wavelets"  
3. S. Haykin and T. Kailath, "Adaptive Filter Theory"

---

### **Concepts of Mobile Computing**
**Course Code:** BCA 308  
**Course Credits:** 4  
**Course Category:** C  
**Course Year:** 3U  
**Course Semester:** 3U  
**No. of Lectures + Tutorials (Hrs./Week):** 03  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45  
**End Sem. Exam Hours:** 3  

**Course Objectives:**  
1. To understand the concept of mobile computing, applications, and limitations.  
2. To explore mobile networking infrastructure (e.g., GSM).  
3. To understand network layers of mobile systems (MAC, Network, Transport).  
4. To explore ad hoc networks and related concepts.  

**Course Outcomes:**  
By the end of this course, students will be able to:  
1. Understand concepts of Mobile Communication.  
2. Analyze next-generation Mobile Communication Systems.  
3. Understand network and transport layers in mobile communication.  
4. Analyze mobile communication protocols for mobile and ad hoc networks.  
5. Understand IP and TCP layers in Mobile Communication.  

**Units Covered:**
- **Unit 1:** Introduction to Mobile Computing, Architecture, Mobility Management.
- **Unit 2:** GSM System Overview, Mobility Management, Location Updates.
- **Unit 3:** GSM Services, SMS, International Roaming, Number Portability.
- **Unit 4:** GSM Data Layer, GPRS, WAP, 3G Systems.
- **Unit 5:** Mobile Application Architectures, Smart Clients, User Interface.
- **Unit 6:** Future Trends in Mobile Technology (4G, 5G, Android OS).

**Textbooks:**  
1. Yi Bang Lin, "Wireless and Mobile Network Architectures"  
2. Martyn Mallick, "Mobile and Wireless Design Essentials"  

---

### **Fundamentals of Optimization Techniques**
**Course Code:** BCA 314  
**Course Credits:** 4  
**Course Category:** C  
**Course Year:** 3U  
**Course Semester:** 3U  
**No. of Lectures + Tutorials (Hrs./Week):** 03  
**Mid Sem. Exam Hours:** 1  
**Total No. of Lectures (L + T):** 45  
**End Sem. Exam Hours:** 3  

**Course Objectives:**  
1. To apply optimization techniques based on engineering mathematics.  
2. To formulate problems using linear, dynamic programming, game theory, and queuing models.  
3. To apply stochastic models for inventory control and manufacturing decision-making.  
4. To formulate mathematical models for analyzing managerial problems in industry.  

**Course Outcomes:**  
By the end of this course, students will be able to:  
1. Formulate real-world problems as linear programming models.  
2. Use graphical, simplex, and analytical methods for optimization.  
3. Identify optimization methods for solving industry problems.  
4. Apply optimization techniques in resource allocation and process optimization.  

**Units Covered:**
- **Unit 1:** Optimization Concept and Classification.
- **Unit 2:** Linear Programming (Simplex Method, Dual Simplex, Sensitivity Analysis).
- **Unit 3:** Queuing Theory (Poisson Distribution, Random Queues).
- **Unit 4:** Unconstrained Optimization (Convex Functions, Gradient Methods).
- **Unit 5:** Constrained Optimization (Kuhn-Tucker Conditions, Penalty Function Methods).

**Textbooks:**  
1. Rao S.S, "Optimization - Theory and Applications"  
2. David G. Luerbeggan, "Introduction to Linear and Nonlinear Programming"  

---